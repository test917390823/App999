buildscript {
    ext {
        springBootVersion = "1.5.4.RELEASE"
    }
    repositories {
    	maven { url "http://10.10.10.60/nexus/content/groups/public" }
        maven { url "http://repo.spring.io/libs-release" }
        maven { url "http://repo.spring.io/libs-milestone" }
        maven { url "http://repo.spring.io/snapshot" }
	    jcenter()
        mavenCentral()
    }
    dependencies {
    	classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0'
    }
    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
        compile.exclude module: "slf4j-log4j12"
        compile.exclude module: "tomcat-embed-el"
        compile.exclude module: "jsr311-api"
    }
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "maven-publish"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: 'org.sonarqube'
jar {
    baseName = project.name
    version = "0.0.1"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs = ['-parameters']
    options.fork = true
    options.forkOptions.executable = 'javac'
}

repositories {
    maven { url "http://10.10.10.60/nexus/content/groups/public" }
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    jcenter()
    mavenCentral()
}
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}
dependencyManagement {
   imports {
	mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
   }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-jersey"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "com.jyall.apollo:jersey-swagger-common:0.0.1-SNAPSHOT"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}
eclipse {
    classpath {
         containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
         containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
         downloadSources = true   //eclipse下载source的配置
         downloadJavadoc = false  //eclipse下载doc的配置
    }
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
task wrapper(type: Wrapper) {
    gradleVersion = "2.9"
}
